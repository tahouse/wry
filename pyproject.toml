[tool.poetry]
name = "wry"
version = "0.0.0"  # Placeholder - actual version comes from git tags via poetry-dynamic-versioning
description = "Why Repeat Yourself? - Define your CLI once with Pydantic models"
authors = ["Tyler House <26489166+tahouse@users.noreply.github.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/tahouse/wry"
repository = "https://github.com/tahouse/wry"
documentation = "https://github.com/tahouse/wry#readme"
keywords = ["cli", "pydantic", "click", "wry", "dry", "configuration", "type-safe"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: System Shells",
    "Topic :: Utilities",
]
packages = [{include = "wry"}]

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.0"
pydantic = "^2.9.2"
annotated-types = "^0.6.0"
pydantic-core = "^2.23.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
pytest-xdist = "^3.8.0"
coverage = {extras = ["toml"], version = "^7.10.7"}
ruff = "^0.13.2"
mypy = "^1.18.2"
build = "^1.2.1"
twine = "^6.0.0"
pre-commit = "^3.8.0"
safety = "^3.2.3"
bandit = {extras = ["toml"], version = "^1.7.5"}

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
pattern = "^v(?P<base>\\d+\\.\\d+\\.\\d+)"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["wry/_version.py"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

# Keep existing tool configurations
[tool.ruff]
target-version = "py310"
line-length = 120
extend-exclude = [
    "wry/_version.py",  # Auto-generated by setuptools-scm
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.lint.per-file-ignores]
# Allow lambdas and assert False in test files
"tests/**/*.py" = ["E731", "B011"]
# Allow unused variables in test files
"tests/**/test_*.py" = ["F841"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
extra_checks = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --cov=wry --cov-report=term-missing --cov-report=html --cov-report=xml"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
branch = true
source = ["wry"]
omit = [
    "tests/*",
    "wry/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["wry"]
exclude_dirs = ["tests", "examples"]
skips = ["B101"]  # assert_used - needed for type checking
